#!/usr/bin/env python
"""SLAPI: SoftLayer API Command Line Tool 

Usage: slapi [options] <command> [<args>...]

Options:
    -c, --config CONFIGFILE     Path to config file
    -v, --verbose               Enable verbose logging
    -h, --help                  Display help

The most commonly used slapi commands are:
    help            Display this message 
    commands        List available commands
    hardware        Hardware related commands (show, osreload, etc.)
    billing         Billing related commands (quotes, orders, etc.)
    network         Network related commands (vlans, subnets)
"""
import os
import sys
import inspect
import traceback
import docopt

from collections import OrderedDict

from util.config import config, _load_config
from util.log import log, configure_log
from util.helpers import configure_colors, error, warning


#==============================================================================
# Constants
#==============================================================================

VERSION = '0.1.0'
MODULE_DIR = 'commands'
BUILTINS = {'commands': 'list_commands', 'help': 'display_help'}

DEFAULT_LOG_FILE = None
DEFAULT_LOG_LEVEL = 'INFO'
DEFAULT_CONFIGFILE = "%s/.slapi.conf" % (os.path.expanduser("~"))


#==============================================================================
# Helpers
#==============================================================================

def _get_root_directory():
    """Return slapi root directory"""
    return os.path.dirname(os.path.realpath(__file__))


def _get_installed_modules():
    """Generator returning all commands in MODULE_DIR"""
    for filename in os.listdir(os.path.join(_get_root_directory(), MODULE_DIR)):
        if (not filename.startswith('.') and
                not filename.startswith('_') and
                filename.endswith('.py')):
            yield os.path.splitext(filename)[0]


def _get_builtin_commands():
    """Generator returning builtin commands"""
    for command, _func in BUILTINS.iteritems():
        yield command


def _load_command_module(name):
    """Import given command module"""
    try:
        module = getattr(__import__('.'.join([MODULE_DIR, name])), name)
        log.debug("loaded module: %s", '.'.join([MODULE_DIR, name]))
        return module
    except ImportError:
        print error(traceback.format_exc())
        sys.exit(1)
    return None


def _get_command_module_subcommands(module):
    """Generator returning all commands in the given module"""
    for func_name, _func in inspect.getmembers(module):
        if not func_name.startswith('_'):
            yield func_name


def _handle_command(module, global_args):
    log.debug("_handle_command: %s", module.__name__)

    # Get command
    command = global_args['<command>']

    # Check if subcommand was given
    if len(global_args['<args>']) > 0:
        # Get subcommand
        subcommand = global_args['<args>'][0]
        if subcommand in list(_get_command_module_subcommands(module)):
            # Get subcommand function from module
            func = getattr(module, subcommand)

            # Parse subcommand arguments from module.func's docstring
            subcommand_argv = [command, subcommand] + global_args['<args>'][1:]
            subcommand_args = docopt.docopt(func.__doc__, argv=subcommand_argv)

            # Handle subcommand
            _handle_subcommand(module, func, subcommand_args)
        else:
            print error("Unknown subcommand: %s" % (subcommand))
            print (module.__doc__)
            sys.exit(1)

    else:
        # If no subcommand was given, invoke the modules main function
        if hasattr(module, 'main'):
            func = getattr(module, 'main')

            # Parse subcommand arguments from module.func's docstring
            subcommand_argv = [command] + global_args['<args>']
            subcommand_args = docopt.docopt(func.__doc__, argv=subcommand_argv)

            # Handle subcommand
            _handle_subcommand(module, func, subcommand_args)
        else:
            # If no main function is defined, just print the docstring
            print module.__doc__
            sys.exit(1)


def _handle_subcommand(module, func, subcommand_args):
    log.debug("_handle_subcommand: %s.%s", module.__name__, func.__name__)

    # Invoke subcommand
    func(subcommand_args)


def display_help(args):
    """Display slapi help

    Usage: slapi help [<command>]
    """
    print __doc__
    sys.exit(0)


def list_commands(args):
    """List available commands

    Usage: slapi commands [<command>]

    """

    # Build a dict of commands to docstrings
    command_list = OrderedDict()

    # Get builtin commands
    for command in _get_builtin_commands():
        # Get command function from module
        command_func = getattr(sys.modules[__name__], BUILTINS[command])
        command_list[command] = command_func.__doc__ 

    # Get installed modules
    for command in _get_installed_modules():
        # Load command module
        module = _load_command_module(command)
        # Get command module subcommands
        for subcommand, subcommand_func in inspect.getmembers(module):
            if inspect.isfunction(subcommand_func) == False:
                continue
            if subcommand.startswith('_'):
                continue
            if subcommand_func.__module__ != module.__name__:
                continue
            if subcommand == "main":
                # TODO: Handle main commands 
                continue

            command_name = "%s %s" % (command, subcommand)
            command_list[command_name] = subcommand_func.__doc__

    # Calculate ljust
    ljust = max(map(lambda k: len(k) if k else 0, command_list.keys())) + 4

    # Display commands
    print "Available Commands:"
    for command_name, command_doc in command_list.iteritems():
        print "  ", command_name.ljust(ljust), command_doc.split('\n')[0]

def main():
    """SLAPI Main"""

    # Configure Colors
    configure_colors()

    # Parse Command Arguments
    global_args = docopt.docopt(__doc__, version=VERSION, options_first=True)

    if global_args['--config']:
        configfile = global_args['--config']
    else:
        configfile = DEFAULT_CONFIGFILE

    # Load Configuration
    _load_config(configfile)

    if global_args['--verbose']:
        config['log_level'] = 'DEBUG'
    else:
        if 'log_level' not in config:
            config['log_level'] = DEFAULT_LOG_LEVEL

    # Configure Log
    configure_log(log, config['log_level'])

    # Handle Command
    command = global_args['<command>']
    if command in list(_get_builtin_commands()):
        command_module = sys.modules[__name__]
        # Get command function from module
        command_func = getattr(command_module, BUILTINS[command])

        # Parse subcommand arguments from module.func's docstring
        command_argv = [command] + global_args['<args>'][1:]
        command_args = docopt.docopt(command_func.__doc__, argv=command_argv)

        # Handle subcommand
        _handle_subcommand(command_module, command_func, command_args)

    elif command in list(_get_installed_modules()):
        # Load command module
        command_module = _load_command_module(command)
        _handle_command(command_module, global_args)
    else:
        print warning("Unknown command: %s" % (command))
        print __doc__
        sys.exit(1)


if __name__ == "__main__":
    main()
